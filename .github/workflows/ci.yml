name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.12', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Poetry
        run: pipx install poetry
        
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
        
      - name: Run tests
        run: |
          poetry run pytest -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: pipx install poetry
        
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
        
      - name: Format check (Black)
        run: poetry run black --check --diff .
        
      - name: Import sorting (isort)
        run: poetry run isort --check-only --diff .
        
      - name: Linting (Ruff)
        run: poetry run ruff check . --output-format=github
        
      - name: Type checking (MyPy)
        run: poetry run mypy --show-error-codes --pretty
        
      - name: Security scan (Bandit)
        run: poetry run bandit -r src/ -f json -o bandit-report.json || true

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: pipx install poetry
        
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
        
      - name: Run performance benchmarks
        run: |
          poetry run python -c "
          from sql_safe import mysql_with_timeout
          import time
          
          # Run multiple iterations for stable results
          times = []
          for _ in range(5):
              start = time.perf_counter()
              for i in range(10000):
                  query = mysql_with_timeout(f'SELECT {i} as test_value', timeout_ms=1000)
              end = time.perf_counter()
              times.append((end - start) * 1000)
          
          avg_time = sum(times) / len(times)
          ops_per_sec = 10000 / (avg_time / 1000)
          print(f'✅ Average execution time: {avg_time:.2f}ms')
          print(f'✅ Throughput: {ops_per_sec:,.0f} operations/sec')
          
          # Performance regression check
          if ops_per_sec < 100000:  # 100K ops/sec threshold
              print('⚠️  Performance regression detected!')
              exit(1)
          "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: pipx install poetry
        
      - name: Build package
        run: poetry build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
